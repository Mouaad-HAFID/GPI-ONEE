// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Entities.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dir")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainePerso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fonction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Matricule")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poste")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniteStruc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Contrat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date3")
                        .HasColumnType("datetime2");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroContrat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FournisseurId");

                    b.ToTable("Contrats");
                });

            modelBuilder.Entity("API.Entities.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MouvementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MouvementId");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("API.Entities.Equipement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CodeContrat")
                        .HasColumnType("int");

                    b.Property<string>("CodeONE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<int>("GammeId")
                        .HasColumnType("int");

                    b.Property<int?>("InventaireId")
                        .HasColumnType("int");

                    b.Property<int>("Serie")
                        .HasColumnType("int");

                    b.Property<int>("TypeEquipementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("GammeId");

                    b.HasIndex("InventaireId");

                    b.HasIndex("TypeEquipementId");

                    b.ToTable("Equipements");
                });

            modelBuilder.Entity("API.Entities.Fournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeFournisseur")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fournisseur");
                });

            modelBuilder.Entity("API.Entities.Gamme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caracteristiques")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Gammes");
                });

            modelBuilder.Entity("API.Entities.Inventaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId")
                        .IsUnique();

                    b.ToTable("Inventaire");
                });

            modelBuilder.Entity("API.Entities.Mouvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateFinMouvement")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateMouvement")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DemandeurId")
                        .HasColumnType("int");

                    b.Property<string>("ListeEquipements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroMvt")
                        .HasColumnType("int");

                    b.Property<string>("TypeMouvement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DemandeurId");

                    b.ToTable("Mouvements");
                });

            modelBuilder.Entity("API.Entities.TypeEquipement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeEquipement");
                });

            modelBuilder.Entity("EquipementMouvement", b =>
                {
                    b.Property<int>("EquipementsId")
                        .HasColumnType("int");

                    b.Property<int>("MouvementsId")
                        .HasColumnType("int");

                    b.HasKey("EquipementsId", "MouvementsId");

                    b.HasIndex("MouvementsId");

                    b.ToTable("EquipementMouvement");
                });

            modelBuilder.Entity("API.Entities.Contrat", b =>
                {
                    b.HasOne("API.Entities.Fournisseur", "Fournisseur")
                        .WithMany("Contrats")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("API.Entities.Direction", b =>
                {
                    b.HasOne("API.Entities.Mouvement", "Mouvement")
                        .WithMany()
                        .HasForeignKey("MouvementId");

                    b.Navigation("Mouvement");
                });

            modelBuilder.Entity("API.Entities.Equipement", b =>
                {
                    b.HasOne("API.Entities.Agent", "Agent")
                        .WithMany("Equipements")
                        .HasForeignKey("AgentId");

                    b.HasOne("API.Entities.Fournisseur", "Fournisseur")
                        .WithMany("Equipements")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Gamme", "Gamme")
                        .WithMany("Equipements")
                        .HasForeignKey("GammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Inventaire", "Inventaire")
                        .WithMany("Equipements")
                        .HasForeignKey("InventaireId");

                    b.HasOne("API.Entities.TypeEquipement", "TypeEquipement")
                        .WithMany("Equipement")
                        .HasForeignKey("TypeEquipementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Fournisseur");

                    b.Navigation("Gamme");

                    b.Navigation("Inventaire");

                    b.Navigation("TypeEquipement");
                });

            modelBuilder.Entity("API.Entities.Gamme", b =>
                {
                    b.HasOne("API.Entities.TypeEquipement", "Type")
                        .WithMany("Gammes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("API.Entities.Inventaire", b =>
                {
                    b.HasOne("API.Entities.Direction", "Direction")
                        .WithOne("Inventaire")
                        .HasForeignKey("API.Entities.Inventaire", "DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("API.Entities.Mouvement", b =>
                {
                    b.HasOne("API.Entities.Agent", "Demandeur")
                        .WithMany("Mouvements")
                        .HasForeignKey("DemandeurId");

                    b.Navigation("Demandeur");
                });

            modelBuilder.Entity("EquipementMouvement", b =>
                {
                    b.HasOne("API.Entities.Equipement", null)
                        .WithMany()
                        .HasForeignKey("EquipementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Mouvement", null)
                        .WithMany()
                        .HasForeignKey("MouvementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.Agent", b =>
                {
                    b.Navigation("Equipements");

                    b.Navigation("Mouvements");
                });

            modelBuilder.Entity("API.Entities.Direction", b =>
                {
                    b.Navigation("Inventaire");
                });

            modelBuilder.Entity("API.Entities.Fournisseur", b =>
                {
                    b.Navigation("Contrats");

                    b.Navigation("Equipements");
                });

            modelBuilder.Entity("API.Entities.Gamme", b =>
                {
                    b.Navigation("Equipements");
                });

            modelBuilder.Entity("API.Entities.Inventaire", b =>
                {
                    b.Navigation("Equipements");
                });

            modelBuilder.Entity("API.Entities.TypeEquipement", b =>
                {
                    b.Navigation("Equipement");

                    b.Navigation("Gammes");
                });
#pragma warning restore 612, 618
        }
    }
}
